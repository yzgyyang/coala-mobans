#!/usr/bin/env python3

{%if package_module == 'coalib' %}
import datetime
{%endif%}
import locale
import os
import platform
import sys
{%if package_module == 'coalib' %}
from os import getenv
{%endif%}
{% if docs_output_dir %}
from subprocess import call
{% endif %}

import setuptools.command.build_py
from setuptools import find_packages, setup
from setuptools.command.test import test as TestCommand

{%if package_module == 'coalib' %}
from coalib import assert_supported_version, get_version
from coalib.misc.BuildManPage import BuildManPage

{%endif%}
try:
    lc = locale.getlocale()
    pf = platform.system()
    if pf != 'Windows' and lc == (None, None):
        locale.setlocale(locale.LC_ALL, 'C.UTF-8')
except (ValueError, UnicodeError, locale.Error):
    locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

VERSION = '{{build_version}}'
DEPENDENCY_LINKS = []

{% block additional_setup_commands %}
SETUP_COMMANDS = {}
{% endblock %}

{%block local_exec_block_1%}
{%endblock%}

def set_python_path(path):
    if 'PYTHONPATH' in os.environ:
        user_paths = os.environ['PYTHONPATH'].split(os.pathsep)
        user_paths.insert(0, path)
        os.environ['PYTHONPATH'] = os.pathsep.join(user_paths)
    else:
        os.environ['PYTHONPATH'] = path


class PyTestCommand(TestCommand):
    """
    From https://pytest.org/latest/goodpractices.html
    """
    user_options = [('pytest-args=', 'a', 'Arguments to pass to py.test')]

    def initialize_options(self):
        TestCommand.initialize_options(self)
        self.pytest_args = []

    def finalize_options(self):
        TestCommand.finalize_options(self)
        self.test_args = []
        self.test_suite = True

    def run_tests(self):
        # import here, cause outside the eggs aren't loaded
        import pytest
        errno = pytest.main(self.pytest_args)
        sys.exit(errno)


SETUP_COMMANDS['test'] = PyTestCommand

{% if docs_output_dir %}

class BuildDocsCommand(setuptools.command.build_py.build_py):

    def initialize_options(self):
        setup_dir = os.path.join(os.getcwd(), __dir__)
        docs_dir = os.path.join(setup_dir, '{{docs_dir or "docs"}}')
        source_docs_dir = os.path.join(docs_dir,
                                       '{{docs_source_dir or "source/"}}')

        set_python_path(setup_dir)
        {%if package_module == 'coalib' %}
        {% set docs_toc = false %}
        {%endif %}

        self.apidoc_commands = list()
        {% if not packages %}
        {% set packages = [package_module] %}
        {% endif %}

        {% for package in packages: %}
        self.apidoc_commands.append((
            'sphinx-apidoc', '-f', '-o', source_docs_dir,
        {%if not docs_toc %}
            '--no-toc',
        {% endif %}
            os.path.join(setup_dir, '{{package}}')
        ))

        {% endfor %}
        self.make_command = (
            'make', '-C',
            docs_dir,
            'html', 'SPHINXOPTS=-W',
        )

        # build_lib & optimize is set to these as a
        # work around for "AttributeError"
        self.build_lib = ''
        self.optimize = 2

    def run(self):
        for command in self.apidoc_commands:
            err_no = call(command)
            if err_no:
                sys.exit(err_no)
        err_no = call(self.make_command)
        sys.exit(err_no)


SETUP_COMMANDS['docs'] = BuildDocsCommand
{% endif %}
{%block local_exec_block_2%}
{%endblock%}

__dir__ = os.path.dirname(__file__)


def read_requirements(filename):
    """
    Parse a requirements file.

    Accepts vcs+ links, and places the URL into
    `DEPENDENCY_LINKS`.

    :return: list of str for each package
    """
    data = []
    filename = os.path.join(__dir__, filename)
    with open(filename) as requirements:
        required = requirements.read().splitlines()
        for line in required:
            if not line or line.startswith('#'):
                continue

            if '+' in line[:4]:
                repo_link, egg_name = line.split('#egg=')
                if not egg_name:
                    raise ValueError('Unknown requirement: {0}'
                                     .format(line))

                DEPENDENCY_LINKS.append(repo_link)

                line = egg_name.replace('-', '==')

            data.append(line)

    return data


required = read_requirements('requirements.txt')
{%if package_module == 'bears' %}
required.remove('-r bear-requirements.txt')
{%endif%}

test_required = read_requirements('test-requirements.txt')

filename = os.path.join(__dir__, 'README.rst')
with open(filename) as readme:
    long_description = readme.read()

extras_require = None
EXTRAS_REQUIRE = {}
data_files = None
{%block custom_requirements%}
{%endblock%}

if extras_require:
    EXTRAS_REQUIRE = extras_require
SETUP_COMMANDS.update({
{% block custom_setup_commands %}
{% endblock %}
})

if __name__ == '__main__':
{% block setup_call %}
    setup(name='{{name}}',
          version=VERSION,
          description='{{description}}',
          author='{{author}}',
          author_email='{{contact}}',
          maintainer={% if not maintainers %}
{% for maintainer in maintainer_list: %}
{%- if not loop.first %}                     {%endif%}
'{{- maintainer }}{% if not loop.last %}, {%endif%}'{%
if (not rtd_maintainer) and loop.last %},{%endif%}
{% if not loop.last %}

{% endif %}
{% endfor -%}
{% else %}
'{{ maintainers |join(', ') }}'{%endif%}
{% if rtd_maintainer %}

                     if not on_rtd else '{{rtd_maintainer}}',{%
elif not maintainer_list %},{%endif%}

          maintainer_email=({% for email in maintainer_emails: %}
{%- if not loop.first %}                            {%endif%}
'{{- email }}{% if not loop.last %}, {%endif%}'{% if loop.last %}),{%endif%}

{%endfor%}
          url='{{url}}',
          platforms='any',
          packages=find_packages(exclude=('build.*', 'tests', 'tests.*')),
          install_requires=required,
          extras_require=EXTRAS_REQUIRE,
          tests_require=test_required,
          dependency_links=DEPENDENCY_LINKS,
{%if package_module == 'coalib' %}
          package_data={'coalib': ['system_coafile', 'VERSION',
                                   'bearlib/languages/documentation/*.coalang']
                        },
{%elif package_module == 'bears' %}
          package_data={'bears': ['VERSION'],
                        'bears.java': ['checkstyle.jar', 'google_checks.xml'],
                        'bears.scala': ['scalastyle.jar',
                                        'scalastyle_config.xml']},
{% else %}
          package_data={'{{ package_module }}': ['VERSION']},
{%endif%}
          license='{{ license }}',
          data_files=data_files,
          long_description=long_description,
{%if entry_points %}
          entry_points={
  {% for group_name, items in entry_points.items(): %}
              '{{group_name}}': [
    {% for item in items: %}
                  '{{item}}',
    {% endfor %}
              ],
  {% endfor %}
          },
{%endif%}
          # from http://pypi.python.org/pypi?%3Aaction=list_classifiers
          classifiers=[
              'Development Status :: 4 - Beta',

{% if package_module == 'bears' %}
              'Environment :: Plugins',
{% else %}
              'Environment :: Console',
{% endif %}
              'Environment :: MacOS X',
              'Environment :: Win32 (MS Windows)',

              'Intended Audience :: Science/Research',
              'Intended Audience :: Developers',

{% if license == 'AGPL-3.0' %}
              'License :: OSI Approved :: GNU Affero General Public License '
              'v3 or later (AGPLv3+)',
{% elif license == 'GPL v3' %}
              'License :: OSI Approved :: General Public License v3 (GPLv3)'
{% elif license == 'MIT' %}
              'License :: OSI Approved :: MIT License'
{% endif %}

              'Operating System :: OS Independent',

              'Programming Language :: Python :: Implementation :: CPython',
              'Programming Language :: Python :: 3.4',
              'Programming Language :: Python :: 3.5',
              'Programming Language :: Python :: 3.6',
              'Programming Language :: Python :: 3 :: Only',

              'Topic :: Scientific/Engineering :: Information Analysis',
              'Topic :: Software Development :: Quality Assurance',
              'Topic :: Text Processing :: Linguistic'],
          cmdclass=SETUP_COMMANDS,
          )
{% endblock %}
